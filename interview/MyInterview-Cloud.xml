<?xml version='1.0' encoding='UTF-8'?>
<!--
  Content Structure: 

  <entry>
    <type></type>
    <question>
    </question>
    <answer>
    </answer>
  </entry>
-->
<entries>
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <entry>
    <type>AWS</type>
    <question>
What is AWS and what are its main services?
    </question>
    <answer>
⏵ Compute services: AWS Elastic Compute Cloud (EC2) and AWS Lambda
⏵ Storage services: Amazon Simple Storage Service (S3), Amazon Elastic Block Store (EBS), and Amazon Elastic File System (EFS)
⏵ Database services: Amazon Relational Database Service (RDS), Amazon DynamoDB, and Amazon Redshift
⏵ Networking and Content Delivery: Amazon Virtual Private Cloud (VPC), Amazon CloudFront and Amazon Route 53
⏵ Management Tools: AWS Systems Manager, AWS Elastic Beanstalk and AWS CloudFormation
⏵ Security and Identity Management: AWS Identity and Access Management (IAM) and AWS Certificate Manager
⏵ Application Integration: AWS Step Functions, AWS AppSync and AWS EventBridge
⏵ Analytics: Amazon Kinesis, Amazon QuickSight, and Amazon Elasticsearch Service
⏵ Internet of Things: AWS IoT Core and AWS IoT Analytics
⏵ Artificial Intelligence and Machine Learning: Amazon SageMaker, Amazon Transcribe, Amazon Comprehend, and Amazon Rekognition
⏵ Developer Tools: AWS CodeStar, AWS CodeCommit, AWS CodeBuild, and AWS CodeDeploy
⏵ Media Services: AWS Elemental MediaConvert, AWS Elemental MediaLive, AWS Elemental MediaPackage, and AWS Elemental MediaStore
⏵ AR and VR: Amazon Sumerian
⏵ Blockchain: Amazon Managed Blockchain
⏵ CloudWatch: monitor AWS environments like EC2, RDS Instances, and CPU utilization. It also triggers alarms depending on various metrics.
    </answer>
  </entry>
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <entry>
    <type>AWS</type>
    <question>
What is the difference between IaaS and PaaS in AWS?
    </question>
    <answer>
⏵ IaaS (Infrastructure as a Service) refers to a cloud computing model in which users can rent virtualized computing resources, such as servers, storage, and networks, on a pay-as-you-go basis. Examples of AWS services that fall under the IaaS category are Amazon Elastic Compute Cloud (EC2) and Amazon Simple Storage Service (S3). Users have complete control over the operating system, storage, and network configuration, and can deploy their own applications and services.
⏵ PaaS (Platform as a Service) provides a platform for users to deploy and run their applications, without the need to manage the underlying infrastructure. AWS services that fall under the PaaS category include AWS Elastic Beanstalk and AWS Lambda. With PaaS, users don't have to worry about the underlying infrastructure and can focus on developing and deploying their applications.
    </answer>
  </entry>
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <entry>
    <type>AWS</type>
    <question>
How do you secure an AWS infrastructure?
    </question>
    <answer>
⏵ Using IAM to control access to AWS resources and ensure that only authorized users and systems can access them.
⏵ Using VPCs and security groups to control network access to resources, and restrict access to specific IP addresses and ports.
⏵ Encrypting sensitive data, both in transit and at rest, using technologies such as SSL/TLS and encryption keys managed through AWS Key Management Service (KMS).
⏵ Regularly patching and updating systems to ensure that they are protected against known vulnerabilities.
⏵ Monitoring and auditing infrastructure and applications to detect and respond to security incidents.
⏵ Use services like AWS WAF, Shield, and GuardDuty to protect your application and infrastructure from known and unknown threats.
⏵ Implementing a robust disaster recovery and business continuity plan to ensure that your infrastructure can continue to operate in the event of a security incident or other disruption.
⏵ Using AWS Config and other compliance and governance tools to ensure that your infrastructure is configured in accordance with industry and regulatory standards.
    </answer>
  </entry>
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <entry>
    <type>AWS</type>
    <question>
How do you set up a virtual private cloud (VPC) in AWS?
    </question>
    <answer>
⏵ Sign in to the AWS Management Console and navigate to the VPC service.
⏵ Click on "Create VPC" button, and enter a name and IP address range for your VPC. The IP address range should be in CIDR notation, and should be a private range (e.g. 10.0.0.0/16).
⏵ Create subnets in your VPC by clicking "Create Subnet" and specifying the subnet's name and IP address range. You can create multiple subnets in different availability zones to provide a high-availability solution.
⏵ Create a internet gateway and attach it to your VPC. This will allow resources in your VPC to communicate with the internet.
⏵ Create a route table, and add a route that directs all internet-bound traffic to the internet gateway.
⏵ Create security groups and Network Access Control Lists (NACLs) to control inbound and outbound traffic to your VPC.
⏵ Launch instances into your VPC, and associate them with the appropriate security groups and subnets.
⏵ (Optional) Create a virtual private network (VPN) connection to connect your VPC to your on-premises network, using AWS VPN or another supported VPN solution.
    </answer>
  </entry>
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <entry>
    <type>AWS</type>
    <question>
How do you manage and scale an application using AWS services?
    </question>
    <answer>
⏵ Amazon Elastic Container Service (ECS) or Elastic Kubernetes Service (EKS) to deploy and manage containerized applications.
⏵ Amazon Elastic Compute Cloud (EC2) Auto Scaling to automatically scale the number of instances running your application based on demand.
⏵ Amazon Elastic Block Store (EBS) and Amazon Elastic File System (EFS) to provide persistent storage for your application.
⏵ Amazon Elastic Load Balancing (ELB) or Application Load Balancer (ALB) to distribute incoming traffic across multiple instances and ensure high availability.
⏵ Amazon CloudWatch to monitor the performance and health of your application, and to set up alarms to automatically take action when certain thresholds are breached.
⏵ Amazon RDS or Amazon DynamoDB for database management, which allows for automatic scaling, backups and replication.
⏵ Amazon SNS and SQS for asynchronous messaging, which allows for decoupled components of an application to communicate with each other.
⏵ AWS Lambda and AWS Step Functions for event-driven computing, allows you to run code without provisioning or managing servers.
⏵ AWS CodeStar, CodeCommit, CodeBuild, CodeDeploy and CodePipeline for fully managed continuous integration and continuous delivery (CI/CD) service.
⏵ AWS CloudFormation and AWS Elastic Beanstalk to automate the deployment and management of your infrastructure.
    </answer>
  </entry>
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <entry>
    <type>AWS</type>
    <question>
How do you monitor and troubleshoot an AWS infrastructure?
    </question>
    <answer>
⏵ Amazon CloudWatch: A monitoring service that allows you to collect and track metrics, collect and monitor log files, and set alarms.
⏵ AWS Trusted Advisor: A service that provides best practice recommendations to optimize your infrastructure.
⏵ AWS Systems Manager: A service that allows you to manage and troubleshoot your instances and other AWS resources.
⏵ AWS Config: A service that provides an inventory of your AWS resources and their configurations, and can also help you to identify and evaluate changes to your infrastructure.
⏵ AWS CloudTrail: A service that records all API calls made to AWS services in your account, which can be useful for troubleshooting and auditing.
⏵ AWS X-Ray: A service that allows you to trace the flow of requests through your application, and can help you to identify and troubleshoot performance issues.
⏵ AWS Elasticsearch and Kibana: a service that allows you to collect, analyze, and visualize your logs.
⏵ AWS Personal Health Dashboard: A service that provides personalized view of the operational health of your AWS resources, services, and accounts.
⏵ AWS App Runner: A fully managed service that allows you to build, test and deploy containerized applications quickly.
⏵ AWS CodeStar, CodeCommit, CodeBuild, CodeDeploy and CodePipeline for fully managed continuous integration and continuous delivery (CI/CD) service.
⏵ Amazon Elastic Block Store (EBS) snapshots and Amazon Relational Database Service (RDS) snapshots for data backup.
    </answer>
  </entry>
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <entry>
    <type>AWS</type>
    <question>
How do you implement disaster recovery in AWS?
    </question>
    <answer>
⏵ Amazon S3 for data archiving and long-term storage.
⏵ Amazon CloudFront for serving static content from a global network of edge locations.
⏵ Amazon Route 53 for traffic management, which allows you to route traffic to different resources based on the health of your resources.
⏵ Amazon Elastic Compute Cloud (EC2) Auto Scaling and Amazon Elastic Block Store (EBS) for automatically scaling and provisioning resources in response to changes in demand.
⏵ AWS CloudFormation and AWS Elastic Beanstalk to automate the deployment and management of your infrastructure.
⏵ Amazon Elastic File System (EFS) for disaster recovery and high availability.
⏵ AWS Backup: A fully managed service that makes it easy to centralize and automate the back up across AWS services.
⏵ AWS Storage Gateway: a service that enables hybrid storage between on-premises environments and the AWS Cloud.
⏵ AWS Site-to-Site VPN and AWS Direct Connect: services that allow you to establish a secure connection between your on-premises infrastructure and your VPC.
    </answer>
  </entry>
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <entry>
    <type>AWS</type>
    <question>
How do you migrate an application or data to AWS?
    </question>
    <answer>
⏵ Assessment: Identify the application or data that you want to migrate, and assess the complexity and scope of the migration.
⏵ Planning: Design a migration plan that outlines the steps that need to be taken, the resources that will be required, and the timeline for the migration.
⏵ Replication: Replicate your application or data to an AWS environment using a variety of services such as AWS Database Migration Service (DMS), AWS DataSync, AWS Snowball or AWS Transfer for SFTP.
⏵ Testing: Test the replicated application or data in the AWS environment to ensure that it is functioning correctly.
⏵ Cutover: Coordinate the cutover of the application or data to the AWS environment, and update any necessary configuration settings.
⏵ Optimization: Optimize your application or data in the AWS environment to take advantage of the scalability, security, and cost-effectiveness of the platform.
⏵ Monitoring: Monitor the application or data in the AWS environment to ensure that it is performing as expected, and to identify and resolve any issues that arise.
⏵ AWS Application Discovery Service (ADS) and AWS Server Migration Service (SMS) can be used to discover and migrate on-premises servers to the cloud.
⏵ AWS CloudEndure Migration: for migrating multi-tier, live applications with minimal downtime.
⏵ AWS CloudFormation and AWS Elastic Beanstalk: to automate the deployment and management of your infrastructure.
    </answer>
  </entry>
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <entry>
    <type>AWS</type>
    <question>
What are some best practices for using AWS?
    </question>
    <answer>
⏵ Use IAM to control access to your AWS resources, and ensure that only authorized users and systems can access them.
⏵ Use VPCs and security groups to control network access to resources, and restrict access to specific IP addresses and ports.
⏵ Encrypt sensitive data both in transit and at rest, using technologies such as SSL/TLS and encryption keys managed through AWS Key Management Service (KMS).
⏵ Regularly patch and update your systems to ensure that they are protected against known vulnerabilities.
⏵ Monitor and audit your infrastructure and applications to detect and respond to security incidents.
⏵ Use services like AWS WAF, Shield, and GuardDuty to protect your application and infrastructure from known and unknown threats.
⏵ Implement a robust disaster recovery and business continuity plan to ensure that your infrastructure can continue to operate in the event of a security incident or other disruption.
⏵ Use AWS Config and other compliance and governance tools to ensure that your infrastructure is configured in accordance with industry and regulatory standards.
⏵ Use Auto Scaling and Elastic Load Balancing to ensure high availability and scalability of your applications.
⏵ Use AWS CloudFormation and AWS Elastic Beanstalk to automate the deployment and management of your infrastructure.
⏵ Use CloudWatch and other monitoring services to track the performance and health of your infrastructure and applications.
⏵ Use the principle of least privilege, by giving only necessary permissions to users and resources.
⏵ Use tagging to help you organize and manage your resources, and track costs.
⏵ Use consolidated billing to manage costs and allocation of expenses for multiple accounts and pay for all of them with a single payment method.
⏵ Use AWS CloudTrail to track user activities and resource changes.
    </answer>
  </entry>
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
</entries>
